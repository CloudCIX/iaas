# Generated by Django 2.2.14 on 2020-08-21 17:08
from typing import List
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies: List[str] = []

    operations = [
        migrations.CreateModel(
            name='Allocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('address_id', models.IntegerField(null=True)),
                ('address_range', models.CharField(max_length=49)),
                ('modified_by', models.IntegerField(null=True)),
                ('name', models.CharField(max_length=64)),
            ],
            options={
                'db_table': 'allocation',
            },
        ),
        migrations.CreateModel(
            name='ASN',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('member_id', models.IntegerField(null=True)),
                ('number', models.BigIntegerField()),
            ],
            options={
                'db_table': 'asn',
            },
        ),
        migrations.CreateModel(
            name='CIXBlacklist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('cidr', models.CharField(max_length=49)),
                ('comment', models.TextField()),
                ('modified_by', models.IntegerField()),
            ],
            options={
                'db_table': 'cix_blacklist',
            },
        ),
        migrations.CreateModel(
            name='CIXWhitelist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('cidr', models.CharField(max_length=49)),
                ('comment', models.TextField()),
                ('modified_by', models.IntegerField()),
            ],
            options={
                'db_table': 'cix_whitelist',
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('member_id', models.IntegerField()),
                ('modified_by', models.IntegerField(null=True)),
                ('name', models.CharField(max_length=240)),
            ],
            options={
                'db_table': 'domain',
            },
        ),
        migrations.CreateModel(
            name='FirewallRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('allow', models.BooleanField()),
                ('debug_logging', models.BooleanField(default=False)),
                ('description', models.TextField()),
                ('destination', models.TextField()),
                ('order', models.IntegerField()),
                ('pci_logging', models.BooleanField(default=False)),
                ('port', models.CharField(max_length=11, null=True)),
                ('protocol', models.CharField(
                    choices=[('any', 'any'), ('icmp', 'icmp'), ('tcp', 'tcp'), ('udp', 'udp')],
                    max_length=4,
                )),
                ('source', models.TextField()),
            ],
            options={
                'db_table': 'firewall_rule',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('answer_file_name', models.CharField(max_length=50, null=True)),
                ('display_name', models.CharField(max_length=50)),
                ('filename', models.CharField(max_length=100)),
                ('multiple_ips', models.BooleanField(default=False)),
                ('os_variant', models.CharField(default='rhel6', max_length=25)),
            ],
            options={
                'db_table': 'image',
            },
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('details', models.CharField(default='', max_length=64)),
                ('enabled', models.BooleanField(default=False)),
                ('hostname', models.CharField(default='', max_length=64)),
                ('ip_address', models.GenericIPAddressField(null=True)),
                ('mac_address', models.CharField(max_length=17)),
            ],
            options={
                'db_table': 'interface',
            },
        ),
        migrations.CreateModel(
            name='IPAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('address', models.GenericIPAddressField()),
                ('cloud', models.BooleanField(default=False)),
                ('credentials', models.CharField(default='', max_length=64)),
                ('location', models.CharField(default='', max_length=64)),
                ('modified_by', models.IntegerField(null=True)),
                ('name', models.CharField(default='', max_length=64)),
                ('ping', models.BooleanField(default=False)),
                ('scan', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'ip_address',
            },
        ),
        migrations.CreateModel(
            name='IPMI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('client_ip', models.GenericIPAddressField()),
                ('modified_by', models.IntegerField(null=True)),
                ('removed', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'ipmi',
            },
        ),
        migrations.CreateModel(
            name='PoolIP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('domain', models.CharField(max_length=240)),
                ('modified_by', models.IntegerField(null=True)),
                ('ip_address', models.GenericIPAddressField()),
            ],
            options={
                'db_table': 'pool_ip',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('address_id', models.IntegerField()),
                ('manager_id', models.IntegerField()),
                ('name', models.CharField(max_length=100)),
                ('region_id', models.IntegerField()),
                ('run_icarus', models.BooleanField(default=False)),
                ('run_robot', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'project',
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('content', models.CharField(max_length=255)),
                ('failover', models.BooleanField(default=False)),
                ('failover_content', models.CharField(default='', max_length=255)),
                ('georegion', models.IntegerField(choices=[(0, 'Global')])),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('ip_address', models.GenericIPAddressField(null=True)),
                ('member_id', models.IntegerField()),
                ('modified_by', models.IntegerField(null=True)),
                ('name', models.CharField(max_length=80)),
                ('priority', models.IntegerField(null=True)),
                ('time_to_live', models.IntegerField()),
                ('type', models.CharField(
                    choices=[
                        ('NS', 'NS'),
                        ('A', 'A'),
                        ('AAAA', 'AAAA'),
                        ('CNAME', 'CNAME'),
                        ('MX', 'MX'),
                        ('TXT', 'TXT'),
                        ('SRV', 'SRV'),
                        ('PTR', 'PTR'),
                        ('SPF', 'SPF'),
                        ('SSHFP', 'SSHFP'),
                        ('LOC', 'LOC'),
                        ('NAPTR', 'NAPTR'),
                    ],
                    max_length=10,
                )),
            ],
            options={
                'db_table': 'record',
            },
        ),
        migrations.CreateModel(
            name='RegionImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.IntegerField()),
            ],
            options={
                'db_table': 'image_region',
            },
        ),
        migrations.CreateModel(
            name='RegionStorageType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.IntegerField()),
            ],
            options={
                'db_table': 'storage_type_region',
            },
        ),
        migrations.CreateModel(
            name='Router',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('asset_tag', models.IntegerField(null=True)),
                ('capacity', models.IntegerField(null=True)),
                ('enabled', models.BooleanField(default=True)),
                ('region_id', models.IntegerField()),
            ],
            options={
                'db_table': 'router',
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('asset_tag', models.IntegerField(null=True)),
                ('cores', models.IntegerField()),
                ('enabled', models.BooleanField(default=True)),
                ('gb', models.IntegerField()),
                ('model', models.CharField(max_length=64)),
                ('ram', models.IntegerField()),
                ('region_id', models.IntegerField()),
            ],
            options={
                'db_table': 'server',
            },
        ),
        migrations.CreateModel(
            name='ServerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'server_type',
            },
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('gb', models.IntegerField()),
                ('name', models.CharField(max_length=50)),
                ('primary', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'storage',
            },
        ),
        migrations.CreateModel(
            name='StorageHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('gb_quantity', models.IntegerField(null=True)),
                ('gb_sku', models.CharField(max_length=250, null=True)),
                ('storage_name', models.CharField(max_length=50)),
                ('storage_id', models.IntegerField()),
            ],
            options={
                'db_table': 'storage_history',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='StorageType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'storage_type',
            },
        ),
        migrations.CreateModel(
            name='Subnet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('address_id', models.IntegerField(null=True)),
                ('address_range', models.CharField(max_length=49)),
                ('cloud', models.BooleanField(default=False)),
                ('gateway', models.GenericIPAddressField(null=True)),
                ('modified_by', models.IntegerField(null=True)),
                ('name', models.CharField(default='', max_length=128)),
                ('virtual_router_id', models.IntegerField(null=True)),
                ('vlan', models.IntegerField(null=True)),
                ('vxlan', models.IntegerField(null=True)),
                ('allocation', models.ForeignKey(
                    null=True,
                    on_delete=django.db.models.deletion.PROTECT,
                    related_name='subnets',
                    to='iaas.Allocation',
                )),
                ('parent', models.ForeignKey(
                    null=True,
                    on_delete=django.db.models.deletion.PROTECT,
                    related_name='children',
                    to='iaas.Subnet',
                )),
            ],
            options={
                'db_table': 'subnet',
            },
        ),
        migrations.CreateModel(
            name='VirtualRouter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('state', models.IntegerField(default=-1)),
                ('ip_address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='iaas.IPAddress')),
                ('project', models.OneToOneField(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='virtual_router',
                    to='iaas.Project',
                )),
                ('router', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT,
                    related_name='virtual_routers',
                    to='iaas.Router',
                )),
            ],
            options={
                'db_table': 'virtual_router',
            },
        ),
        migrations.CreateModel(
            name='VM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('cpu', models.IntegerField()),
                ('dns', models.TextField()),
                ('name', models.CharField(max_length=128)),
                ('ram', models.IntegerField()),
                ('state', models.IntegerField(default=-1)),
                ('gateway_subnet', models.ForeignKey(
                    null=True,
                    on_delete=django.db.models.deletion.PROTECT,
                    to='iaas.Subnet',
                )),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='iaas.Image')),
                ('project', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='vms',
                    to='iaas.Project',
                )),
                ('server', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT,
                    related_name='guest_vms',
                    to='iaas.Server',
                )),
            ],
            options={
                'db_table': 'vm',
            },
        ),
        migrations.CreateModel(
            name='VPN',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('customer_subnets', django.contrib.postgres.fields.ArrayField(
                    base_field=models.CharField(max_length=49),
                    size=None,
                )),
                ('description', models.TextField(null=True)),
                ('send_email', models.BooleanField(default=False)),
                ('stif_number', models.IntegerField()),
                ('vpn_type', models.CharField(
                    choices=[('site_to_site', 'site_to_site')],
                    default='site_to_site',
                    max_length=20,
                )),
                ('ike_authentication', models.TextField()),
                ('ike_dh_groups', models.TextField()),
                ('ike_encryption', models.TextField()),
                ('ike_lifetime', models.IntegerField(default=28800)),
                ('ike_mode', models.CharField(choices=[('main', 'main'), ('aggressive', 'aggressive')], max_length=10)),
                ('ike_pre_shared_key', models.CharField(max_length=255)),
                ('ike_public_ip', models.GenericIPAddressField()),
                ('ike_version', models.CharField(
                    choices=[('v1-only', 'v1-only'), ('v2-only', 'v2-only')],
                    max_length=8,
                )),
                ('ipsec_authentication', models.TextField()),
                ('ipsec_encryption', models.TextField()),
                ('ipsec_establish_time', models.CharField(
                    choices=[('immediately', 'immediately'), ('on-traffic', 'on-traffic')],
                    max_length=12,
                )),
                ('ipsec_pfs_groups', models.TextField(null=True)),
                ('ipsec_lifetime', models.IntegerField(default=3600)),
                ('local_subnet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='iaas.Subnet')),
                ('virtual_router', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='vpn_tunnels',
                    to='iaas.VirtualRouter',
                )),
            ],
            options={
                'db_table': 'vpn',
            },
        ),
        migrations.CreateModel(
            name='VPNHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('changed_by', models.IntegerField()),
                ('customer_address', models.IntegerField()),
                ('project_id', models.IntegerField()),
                ('project_name', models.CharField(max_length=100)),
                ('vpn_quantity', models.IntegerField(null=True)),
                ('vpn_sku', models.CharField(max_length=250, null=True)),
                ('vpn', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='vpn_history',
                    to='iaas.VPN',
                )),
            ],
            options={
                'db_table': 'vpn_history',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='VMHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('changed_by', models.IntegerField()),
                ('cpu_quantity', models.IntegerField(null=True)),
                ('cpu_sku', models.CharField(max_length=250, null=True)),
                ('customer_address', models.IntegerField()),
                ('image_quantity', models.IntegerField(null=True)),
                ('image_sku', models.CharField(max_length=250, null=True)),
                ('nat_quantity', models.IntegerField(null=True)),
                ('nat_sku', models.CharField(max_length=250, null=True)),
                ('project_id', models.IntegerField()),
                ('project_vm_name', models.CharField(max_length=228)),
                ('ram_quantity', models.IntegerField(null=True)),
                ('ram_sku', models.CharField(max_length=250, null=True)),
                ('state', models.IntegerField(null=True)),
                ('vm', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT,
                    related_name='history',
                    to='iaas.VM',
                )),
            ],
            options={
                'db_table': 'vm_history',
                'ordering': ['-created'],
            },
        ),
        migrations.AddIndex(
            model_name='storagetype',
            index=models.Index(fields=['id'], name='storage_type_id'),
        ),
        migrations.AddIndex(
            model_name='storagetype',
            index=models.Index(fields=['deleted'], name='storage_type_deleted'),
        ),
        migrations.AddIndex(
            model_name='storagetype',
            index=models.Index(fields=['name'], name='storage_type_name'),
        ),
        migrations.AddField(
            model_name='storagehistory',
            name='vm_history',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='storage_histories',
                to='iaas.VMHistory',
            ),
        ),
        migrations.AddField(
            model_name='storage',
            name='vm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storages', to='iaas.VM'),
        ),
        migrations.AddIndex(
            model_name='servertype',
            index=models.Index(fields=['id'], name='server_type_id'),
        ),
        migrations.AddIndex(
            model_name='servertype',
            index=models.Index(fields=['deleted'], name='server_type_deleted'),
        ),
        migrations.AddIndex(
            model_name='servertype',
            index=models.Index(fields=['name'], name='server_type_name'),
        ),
        migrations.AddField(
            model_name='server',
            name='storage_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='iaas.StorageType'),
        ),
        migrations.AddField(
            model_name='server',
            name='type',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='servers',
                to='iaas.ServerType',
            ),
        ),
        migrations.AddIndex(
            model_name='router',
            index=models.Index(fields=['id'], name='router_id'),
        ),
        migrations.AddIndex(
            model_name='router',
            index=models.Index(fields=['asset_tag'], name='router_asset_tag'),
        ),
        migrations.AddIndex(
            model_name='router',
            index=models.Index(fields=['capacity'], name='router_capacity'),
        ),
        migrations.AddIndex(
            model_name='router',
            index=models.Index(fields=['deleted'], name='router_deleted'),
        ),
        migrations.AddIndex(
            model_name='router',
            index=models.Index(fields=['enabled'], name='router_enabled'),
        ),
        migrations.AddIndex(
            model_name='router',
            index=models.Index(fields=['region_id'], name='router_region_id'),
        ),
        migrations.AddField(
            model_name='regionstoragetype',
            name='storage_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='regions',
                to='iaas.StorageType',
            ),
        ),
        migrations.AddField(
            model_name='regionimage',
            name='image',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='regions',
                to='iaas.Image',
            ),
        ),
        migrations.AddField(
            model_name='record',
            name='domain',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='records',
                to='iaas.Domain',
            ),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['id'], name='project_id'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['address_id'], name='project_address_id'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['deleted'], name='project_deleted'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['manager_id'], name='project_manager_id'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['name'], name='project_name'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['region_id'], name='project_region_id'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['run_icarus'], name='project_run_icarus'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['run_robot'], name='project_run_robot'),
        ),
        migrations.AddIndex(
            model_name='poolip',
            index=models.Index(fields=['id'], name='pool_ip_id'),
        ),
        migrations.AddIndex(
            model_name='poolip',
            index=models.Index(fields=['created'], name='pool_ip_created'),
        ),
        migrations.AddIndex(
            model_name='poolip',
            index=models.Index(fields=['domain'], name='pool_ip_domain'),
        ),
        migrations.AddIndex(
            model_name='poolip',
            index=models.Index(fields=['deleted'], name='pool_ip_deleted'),
        ),
        migrations.AddIndex(
            model_name='poolip',
            index=models.Index(fields=['ip_address'], name='pool_ip_ip_address'),
        ),
        migrations.AddIndex(
            model_name='poolip',
            index=models.Index(fields=['updated'], name='pool_ip_updated'),
        ),
        migrations.AlterUniqueTogether(
            name='poolip',
            unique_together={('domain', 'deleted')},
        ),
        migrations.AddField(
            model_name='ipmi',
            name='customer_ip',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name='ipmi_logs',
                to='iaas.IPAddress',
            ),
        ),
        migrations.AddField(
            model_name='ipmi',
            name='pool_ip',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='logs', to='iaas.PoolIP'),
        ),
        migrations.AddField(
            model_name='ipaddress',
            name='public_ip',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='iaas.IPAddress'),
        ),
        migrations.AddField(
            model_name='ipaddress',
            name='router',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='router_ips',
                to='iaas.Router',
            ),
        ),
        migrations.AddField(
            model_name='ipaddress',
            name='subnet',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name='ip_addresses',
                to='iaas.Subnet',
            ),
        ),
        migrations.AddField(
            model_name='ipaddress',
            name='vm',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='vm_ips',
                to='iaas.VM',
            ),
        ),
        migrations.AddField(
            model_name='interface',
            name='server',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='interfaces',
                to='iaas.Server',
            ),
        ),
        migrations.AddField(
            model_name='image',
            name='server_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name='images',
                to='iaas.ServerType',
            ),
        ),
        migrations.AddField(
            model_name='firewallrule',
            name='virtual_router',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='firewall_rules',
                to='iaas.VirtualRouter',
            ),
        ),
        migrations.AddIndex(
            model_name='domain',
            index=models.Index(fields=['id'], name='domain_id'),
        ),
        migrations.AddIndex(
            model_name='domain',
            index=models.Index(fields=['created'], name='domain_created'),
        ),
        migrations.AddIndex(
            model_name='domain',
            index=models.Index(fields=['deleted'], name='domain_deleted'),
        ),
        migrations.AddIndex(
            model_name='domain',
            index=models.Index(fields=['member_id'], name='domain_member_id'),
        ),
        migrations.AddIndex(
            model_name='domain',
            index=models.Index(fields=['name'], name='domain_name'),
        ),
        migrations.AddIndex(
            model_name='domain',
            index=models.Index(fields=['updated'], name='domain_updated'),
        ),
        migrations.AlterUniqueTogether(
            name='domain',
            unique_together={('name', 'deleted')},
        ),
        migrations.AddIndex(
            model_name='cixwhitelist',
            index=models.Index(fields=['id'], name='cix_whitelist_id'),
        ),
        migrations.AddIndex(
            model_name='cixwhitelist',
            index=models.Index(fields=['cidr'], name='cix_whitelist_cidr'),
        ),
        migrations.AddIndex(
            model_name='cixwhitelist',
            index=models.Index(fields=['comment'], name='cix_whitelist_comment'),
        ),
        migrations.AddIndex(
            model_name='cixwhitelist',
            index=models.Index(fields=['created'], name='cix_whitelist_created'),
        ),
        migrations.AddIndex(
            model_name='cixwhitelist',
            index=models.Index(fields=['deleted'], name='cix_whitelist_deleted'),
        ),
        migrations.AddIndex(
            model_name='cixwhitelist',
            index=models.Index(fields=['updated'], name='cix_whitelist_updated'),
        ),
        migrations.AlterUniqueTogether(
            name='cixwhitelist',
            unique_together={('cidr', 'deleted')},
        ),
        migrations.AddIndex(
            model_name='cixblacklist',
            index=models.Index(fields=['id'], name='cix_blacklist_id'),
        ),
        migrations.AddIndex(
            model_name='cixblacklist',
            index=models.Index(fields=['cidr'], name='cix_blacklist_cidr'),
        ),
        migrations.AddIndex(
            model_name='cixblacklist',
            index=models.Index(fields=['comment'], name='cix_blacklist_comment'),
        ),
        migrations.AddIndex(
            model_name='cixblacklist',
            index=models.Index(fields=['created'], name='cix_blacklist_created'),
        ),
        migrations.AddIndex(
            model_name='cixblacklist',
            index=models.Index(fields=['deleted'], name='cix_blacklist_deleted'),
        ),
        migrations.AddIndex(
            model_name='cixblacklist',
            index=models.Index(fields=['updated'], name='cix_blacklist_updated'),
        ),
        migrations.AlterUniqueTogether(
            name='cixblacklist',
            unique_together={('cidr', 'deleted')},
        ),
        migrations.AddIndex(
            model_name='asn',
            index=models.Index(fields=['id'], name='asn_id'),
        ),
        migrations.AddIndex(
            model_name='asn',
            index=models.Index(fields=['created'], name='asn_created'),
        ),
        migrations.AddIndex(
            model_name='asn',
            index=models.Index(fields=['deleted'], name='asn_deleted'),
        ),
        migrations.AddIndex(
            model_name='asn',
            index=models.Index(fields=['member_id'], name='asn_member_id'),
        ),
        migrations.AddIndex(
            model_name='asn',
            index=models.Index(fields=['number'], name='asn_number'),
        ),
        migrations.AddIndex(
            model_name='asn',
            index=models.Index(fields=['updated'], name='asn_updated'),
        ),
        migrations.AddField(
            model_name='allocation',
            name='asn',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name='allocations',
                to='iaas.ASN',
            ),
        ),
        migrations.AddIndex(
            model_name='vpnhistory',
            index=models.Index(fields=['id'], name='vpn_history_id'),
        ),
        migrations.AddIndex(
            model_name='vpnhistory',
            index=models.Index(fields=['customer_address'], name='vpn_history_customer_address'),
        ),
        migrations.AddIndex(
            model_name='vpnhistory',
            index=models.Index(fields=['project_name'], name='vpn_history_project_name'),
        ),
        migrations.AddIndex(
            model_name='vpnhistory',
            index=models.Index(fields=['changed_by'], name='vpn_history_changed_by'),
        ),
        migrations.AddIndex(
            model_name='vpnhistory',
            index=models.Index(fields=['created'], name='vpn_history_created'),
        ),
        migrations.AddIndex(
            model_name='vpnhistory',
            index=models.Index(fields=['deleted'], name='vpn_history_deleted'),
        ),
        migrations.AddIndex(
            model_name='vpnhistory',
            index=models.Index(fields=['project_id'], name='vpn_history_project_id'),
        ),
        migrations.AddIndex(
            model_name='vpn',
            index=models.Index(fields=['id'], name='vpn_id'),
        ),
        migrations.AddIndex(
            model_name='vpn',
            index=models.Index(fields=['deleted'], name='vpn_deleted'),
        ),
        migrations.AddIndex(
            model_name='vpn',
            index=models.Index(fields=['ike_public_ip'], name='vpn_ike_public_io'),
        ),
        migrations.AddIndex(
            model_name='vmhistory',
            index=models.Index(fields=['id'], name='vm_history_id'),
        ),
        migrations.AddIndex(
            model_name='vmhistory',
            index=models.Index(fields=['changed_by'], name='vm_history_changed_by'),
        ),
        migrations.AddIndex(
            model_name='vmhistory',
            index=models.Index(fields=['cpu_sku'], name='vm_history_cpu_sku'),
        ),
        migrations.AddIndex(
            model_name='vmhistory',
            index=models.Index(fields=['created'], name='vm_history_created'),
        ),
        migrations.AddIndex(
            model_name='vmhistory',
            index=models.Index(fields=['customer_address'], name='vm_history_customer_address'),
        ),
        migrations.AddIndex(
            model_name='vmhistory',
            index=models.Index(fields=['deleted'], name='vm_history_deleted'),
        ),
        migrations.AddIndex(
            model_name='vmhistory',
            index=models.Index(fields=['image_sku'], name='vm_history_image_sku'),
        ),
        migrations.AddIndex(
            model_name='vmhistory',
            index=models.Index(fields=['nat_sku'], name='vm_history_nat_sku'),
        ),
        migrations.AddIndex(
            model_name='vmhistory',
            index=models.Index(fields=['project_id'], name='vm_history_project_id'),
        ),
        migrations.AddIndex(
            model_name='vmhistory',
            index=models.Index(fields=['ram_sku'], name='vm_history_ram_sku'),
        ),
        migrations.AddIndex(
            model_name='vmhistory',
            index=models.Index(fields=['state'], name='vm_history_state'),
        ),
        migrations.AddIndex(
            model_name='vm',
            index=models.Index(fields=['id'], name='vm_id'),
        ),
        migrations.AddIndex(
            model_name='vm',
            index=models.Index(fields=['deleted'], name='vm_deleted'),
        ),
        migrations.AddIndex(
            model_name='vm',
            index=models.Index(fields=['name'], name='vm_name'),
        ),
        migrations.AddIndex(
            model_name='vm',
            index=models.Index(fields=['state'], name='vm_state'),
        ),
        migrations.AddIndex(
            model_name='virtualrouter',
            index=models.Index(fields=['id'], name='virtual_router_id'),
        ),
        migrations.AddIndex(
            model_name='virtualrouter',
            index=models.Index(fields=['deleted'], name='virtual_router_deleted'),
        ),
        migrations.AddIndex(
            model_name='virtualrouter',
            index=models.Index(fields=['state'], name='virtual_router_state'),
        ),
        migrations.AddIndex(
            model_name='subnet',
            index=models.Index(fields=['id'], name='subnet_id'),
        ),
        migrations.AddIndex(
            model_name='subnet',
            index=models.Index(fields=['address_id'], name='subnet_address_id'),
        ),
        migrations.AddIndex(
            model_name='subnet',
            index=models.Index(fields=['address_range'], name='subnet_address_range'),
        ),
        migrations.AddIndex(
            model_name='subnet',
            index=models.Index(fields=['cloud'], name='subnet_cloud'),
        ),
        migrations.AddIndex(
            model_name='subnet',
            index=models.Index(fields=['created'], name='subnet_created'),
        ),
        migrations.AddIndex(
            model_name='subnet',
            index=models.Index(fields=['deleted'], name='subnet_deleted'),
        ),
        migrations.AddIndex(
            model_name='subnet',
            index=models.Index(fields=['gateway'], name='subnet_gateway'),
        ),
        migrations.AddIndex(
            model_name='subnet',
            index=models.Index(fields=['name'], name='subnet_name'),
        ),
        migrations.AddIndex(
            model_name='subnet',
            index=models.Index(fields=['updated'], name='subnet_updated'),
        ),
        migrations.AddIndex(
            model_name='subnet',
            index=models.Index(fields=['virtual_router_id'], name='subnet_virtual_router_id'),
        ),
        migrations.AddIndex(
            model_name='subnet',
            index=models.Index(fields=['vlan'], name='subnet_vlan'),
        ),
        migrations.AddIndex(
            model_name='subnet',
            index=models.Index(fields=['vxlan'], name='subnet_vxlan'),
        ),
        migrations.AddIndex(
            model_name='storagehistory',
            index=models.Index(fields=['id'], name='storage_history_id'),
        ),
        migrations.AddIndex(
            model_name='storagehistory',
            index=models.Index(fields=['gb_sku'], name='storage_history_gb_sku'),
        ),
        migrations.AddIndex(
            model_name='storagehistory',
            index=models.Index(fields=['storage_id'], name='storage_history_storage_id'),
        ),
        migrations.AddIndex(
            model_name='storage',
            index=models.Index(fields=['id'], name='storage_id'),
        ),
        migrations.AddIndex(
            model_name='storage',
            index=models.Index(fields=['deleted'], name='storage_deleted'),
        ),
        migrations.AddIndex(
            model_name='storage',
            index=models.Index(fields=['name'], name='storage_name'),
        ),
        migrations.AddIndex(
            model_name='storage',
            index=models.Index(fields=['primary'], name='storage_primary'),
        ),
        migrations.AddIndex(
            model_name='server',
            index=models.Index(fields=['id'], name='server_id'),
        ),
        migrations.AddIndex(
            model_name='server',
            index=models.Index(fields=['asset_tag'], name='server_asset_tag'),
        ),
        migrations.AddIndex(
            model_name='server',
            index=models.Index(fields=['cores'], name='server_cores'),
        ),
        migrations.AddIndex(
            model_name='server',
            index=models.Index(fields=['deleted'], name='server_deleted'),
        ),
        migrations.AddIndex(
            model_name='server',
            index=models.Index(fields=['enabled'], name='server_enabled'),
        ),
        migrations.AddIndex(
            model_name='server',
            index=models.Index(fields=['gb'], name='server_gb'),
        ),
        migrations.AddIndex(
            model_name='server',
            index=models.Index(fields=['model'], name='server_model'),
        ),
        migrations.AddIndex(
            model_name='server',
            index=models.Index(fields=['ram'], name='server_ram'),
        ),
        migrations.AddIndex(
            model_name='server',
            index=models.Index(fields=['region_id'], name='server_region_id'),
        ),
        migrations.AddIndex(
            model_name='regionstoragetype',
            index=models.Index(fields=['region'], name='storage_type_region_region'),
        ),
        migrations.AlterUniqueTogether(
            name='regionstoragetype',
            unique_together={('storage_type', 'region')},
        ),
        migrations.AddIndex(
            model_name='regionimage',
            index=models.Index(fields=['region'], name='image_region_region'),
        ),
        migrations.AlterUniqueTogether(
            name='regionimage',
            unique_together={('image', 'region')},
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['id'], name='record_id'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['created'], name='record_created'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['content'], name='record_content'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['deleted'], name='record_deleted'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['failover'], name='record_failover'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['failover_content'], name='record_failover_content'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['ip_address'], name='record_ip_address'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['name'], name='record_name'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['time_to_live'], name='record_time_to_live'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['type'], name='record_type'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['updated'], name='record_updated'),
        ),
        migrations.AddIndex(
            model_name='ipmi',
            index=models.Index(fields=['id'], name='ipmi_id'),
        ),
        migrations.AddIndex(
            model_name='ipmi',
            index=models.Index(fields=['client_ip'], name='ipmi_client_ip'),
        ),
        migrations.AddIndex(
            model_name='ipmi',
            index=models.Index(fields=['created'], name='ipmi_created'),
        ),
        migrations.AddIndex(
            model_name='ipmi',
            index=models.Index(fields=['deleted'], name='ipmi_deleted'),
        ),
        migrations.AddIndex(
            model_name='ipmi',
            index=models.Index(fields=['modified_by'], name='ipmi_modified_by'),
        ),
        migrations.AddIndex(
            model_name='ipmi',
            index=models.Index(fields=['removed'], name='ipmi_removed'),
        ),
        migrations.AddIndex(
            model_name='ipmi',
            index=models.Index(fields=['updated'], name='ipmi_updated'),
        ),
        migrations.AddIndex(
            model_name='ipaddress',
            index=models.Index(fields=['id'], name='ip_address_id'),
        ),
        migrations.AddIndex(
            model_name='ipaddress',
            index=models.Index(fields=['address'], name='ip_address_address'),
        ),
        migrations.AddIndex(
            model_name='ipaddress',
            index=models.Index(fields=['cloud'], name='ip_address_cloud'),
        ),
        migrations.AddIndex(
            model_name='ipaddress',
            index=models.Index(fields=['created'], name='ip_address_created'),
        ),
        migrations.AddIndex(
            model_name='ipaddress',
            index=models.Index(fields=['deleted'], name='ip_address_deleted'),
        ),
        migrations.AddIndex(
            model_name='ipaddress',
            index=models.Index(fields=['name'], name='ip_address_name'),
        ),
        migrations.AddIndex(
            model_name='ipaddress',
            index=models.Index(fields=['ping'], name='ip_address_ping'),
        ),
        migrations.AddIndex(
            model_name='ipaddress',
            index=models.Index(fields=['scan'], name='ip_address_scan'),
        ),
        migrations.AddIndex(
            model_name='ipaddress',
            index=models.Index(fields=['updated'], name='ip_address_updated'),
        ),
        migrations.AddIndex(
            model_name='interface',
            index=models.Index(fields=['id'], name='interface_id'),
        ),
        migrations.AddIndex(
            model_name='interface',
            index=models.Index(fields=['deleted'], name='interface_deleted'),
        ),
        migrations.AddIndex(
            model_name='interface',
            index=models.Index(fields=['details'], name='interface_details'),
        ),
        migrations.AddIndex(
            model_name='interface',
            index=models.Index(fields=['enabled'], name='interface_enabled'),
        ),
        migrations.AddIndex(
            model_name='interface',
            index=models.Index(fields=['hostname'], name='interface_hostname'),
        ),
        migrations.AddIndex(
            model_name='interface',
            index=models.Index(fields=['ip_address'], name='interface_ip_address'),
        ),
        migrations.AddIndex(
            model_name='interface',
            index=models.Index(fields=['mac_address'], name='interface_mac_address'),
        ),
        migrations.AddIndex(
            model_name='image',
            index=models.Index(fields=['id'], name='image_id'),
        ),
        migrations.AddIndex(
            model_name='image',
            index=models.Index(fields=['deleted'], name='image_deleted'),
        ),
        migrations.AddIndex(
            model_name='image',
            index=models.Index(fields=['display_name'], name='image_display_name'),
        ),
        migrations.AddIndex(
            model_name='firewallrule',
            index=models.Index(fields=['id'], name='firewall_rule_id'),
        ),
        migrations.AddIndex(
            model_name='firewallrule',
            index=models.Index(fields=['deleted'], name='firewall_rule_deleted'),
        ),
        migrations.AddIndex(
            model_name='firewallrule',
            index=models.Index(fields=['order'], name='firewall_rule_order'),
        ),
        migrations.AddIndex(
            model_name='allocation',
            index=models.Index(fields=['id'], name='allocation_id'),
        ),
        migrations.AddIndex(
            model_name='allocation',
            index=models.Index(fields=['address_id'], name='allocation_address_id'),
        ),
        migrations.AddIndex(
            model_name='allocation',
            index=models.Index(fields=['address_range'], name='allocation_address_range'),
        ),
        migrations.AddIndex(
            model_name='allocation',
            index=models.Index(fields=['created'], name='allocation_created'),
        ),
        migrations.AddIndex(
            model_name='allocation',
            index=models.Index(fields=['deleted'], name='allocation_deleted'),
        ),
        migrations.AddIndex(
            model_name='allocation',
            index=models.Index(fields=['name'], name='allocation_name'),
        ),
        migrations.AddIndex(
            model_name='allocation',
            index=models.Index(fields=['updated'], name='allocation_updated'),
        ),
    ]
